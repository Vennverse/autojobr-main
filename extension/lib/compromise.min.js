// Compromise.js NLP Library - Minimal version for AutoJobr
// This is a simplified version focused on skill extraction and text analysis

(function() {
  'use strict';
  
  // Simple NLP functions for job description analysis
  const nlp = {
    // Extract skills from text
    extractSkills: function(text) {
      const commonSkills = [
        'JavaScript', 'Python', 'Java', 'C++', 'C#', 'PHP', 'Ruby', 'Go', 'Rust', 'Swift',
        'React', 'Vue', 'Angular', 'Node.js', 'Express', 'Django', 'Flask', 'Spring',
        'HTML', 'CSS', 'SQL', 'MongoDB', 'PostgreSQL', 'MySQL', 'Redis',
        'AWS', 'Azure', 'GCP', 'Docker', 'Kubernetes', 'Git', 'Linux',
        'Machine Learning', 'AI', 'Data Science', 'Analytics', 'Tableau',
        'Leadership', 'Communication', 'Problem Solving', 'Project Management'
      ];
      
      const textLower = text.toLowerCase();
      const foundSkills = [];
      
      commonSkills.forEach(skill => {
        if (textLower.includes(skill.toLowerCase())) {
          foundSkills.push(skill);
        }
      });
      
      return foundSkills;
    },
    
    // Extract seniority level
    extractSeniority: function(text) {
      const textLower = text.toLowerCase();
      
      if (textLower.match(/\b(senior|lead|principal|architect|staff)\b/)) {
        return 'Senior';
      } else if (textLower.match(/\b(mid|intermediate|experienced)\b/)) {
        return 'Mid-level';
      } else if (textLower.match(/\b(junior|entry|associate|intern|graduate)\b/)) {
        return 'Entry-level';
      }
      
      return 'Not specified';
    },
    
    // Extract work mode
    extractWorkMode: function(text) {
      const textLower = text.toLowerCase();
      
      if (textLower.match(/\b(remote|work from home|distributed)\b/)) {
        return 'Remote';
      } else if (textLower.match(/\b(hybrid|flexible)\b/)) {
        return 'Hybrid';
      } else if (textLower.match(/\b(on-site|office|in-person)\b/)) {
        return 'On-site';
      }
      
      return 'Not specified';
    }
  };
  
  // Make available globally
  window.nlp = nlp;
  
  // For backward compatibility
  window.compromise = function(text) {
    return {
      text: text,
      out: function() { return text; },
      sentences: function() { return [{ text: text }]; },
      terms: function() { 
        return text.split(/\s+/).map(word => ({ text: word })); 
      }
    };
  };
  
})();